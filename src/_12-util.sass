@use "10-variables" as *

/// Outputs minimum width (breakpoint) override definitions.
///
/// @param {string} $breakpoint
///     Breakpoint value.
@mixin up($breakpoint)
    @media (min-width: map-get($bf-breakpoints, $breakpoint))
        @content



/// Outputs minimum width (breakpoint) override definitions.
///
/// @param {string} $property-map
///     Map of CSS definitions, e.g. (sm: 150px, md: 200px, lg: 250px).
@mixin up-prop($property-map...)
    @each $breakpoint-key, $breakpoint-value in $bf-breakpoints
        @media (min-width: $breakpoint-value)
            @each $property-name, $property-values in $property-map
                #{$property-name}: map-get($property-values, $breakpoint-key)



/// Returns a colour definition, if it exists.
///
/// @param {string} $name
///     Colour name (e.g. cyan).
/// @param {string} $shade
///     Shade (e.g. 400) - 50, 100 - 900 in 100 intervals.
/// @return {string}
///     Colour hex for specified $name and $shade
@function colour($name, $shade)
    // default colour to return on error
    $black: #000

    // ensure the colour exists
    @if not map-has-key($bf-colours, $name)
        @warn "'#{$name}' is not a valid colour - returning #{$black}."
        @return $black

    // ensure the shade exists
    @if not map-has-key(map-get($bf-colours, $name), $shade)
        @warn "#{$shade} is not a valid shade for '#{$name}' - returning #{$black}."
        @return $black

    // return the shade for the colour
    @return map-get(map-get($bf-colours, $name), $shade)



/// Rounds a number down, to three decimal places.
/// Hat-tip https://gist.github.com/terkel/4373420
///
/// @param {number} $number
///     The number to round down, e.g. 15.2656.
/// @return {number}
///     $number to three decimal places (rounded down), e.g. 15.265
@function decimal-floor($number)
    @if type-of($number) != number
        @warn "#{$number} is not a number."
        @return $number

    $precision: 1000
    @return calc(floor($number * $precision) / $precision)
